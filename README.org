#+TITLE: Comparing Damerau-Levenshtein Implementations
#+AUTHOR: Michael Herstine
#+EMAIL: sp1ff@pobox.com
#+DATE: <2024-07-01 Mon 21:17>
#+AUTODATE: t
#+OPTIONS: ^:{}

* Introduction

This repository contains three implementations of [[https://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance][Damerau-Levenshtein]] string distance computation in C++ 17.

* The Program

This package builds a program imaginatively named =dl=. It is installed via the usual autotools incantations. =dl= will compute Damerau-Levenshtein distance over a corpus of input strings provided on the command line with one of three algorithms (on which more below). For performance benchmarking, you can specify that the program should run over the corpus repeatedly and/or print timing information on completion. Say =dl --help= for full usage.

* Discussion

The Damerau-Levenshtein distance between two strings A & B is the minimal number of insertions, deletions, single-character changes & transpositions needed to transform A into B (e.g. "act" -> "cat" -> "cart", so the D-L distance between "act" & "cart" is two). In his original paper [1] Damerau claimed that 80% of the errors in the system which gave rise to his work could be accounted for by one of these four errors.

While it's a popular algorithm for fuzzy searching, there doesn't seem to be a "go-to" implementation out there in C/C++ (it is at the time of this writing a [[https://lists.boost.org/Archives/boost/2016/09/230756.php][feature request]] for the boost string library). There are several others on Github, but the ones I examined lacked both documentation on the algorithms used as well as test suites. 

This repo contains implementations of what I understand to be the three major algorithms implementing Damerau-Levenshtein distance in C++.

** Lowrance & Wagner's Recursive Relation

This is the algorithm laid out in Wikipedia (again at the time of this writing). It is due to Lowrance & Wagner [2] and seems to be the most widely known. In their paper, they prove that under a few (reasonable) conditions, a simple |A| x |B| recurrence relation is sufficient to compute the D-L distance between strings A & B. Their algorithm runs in O(|A|*|B|) time & space.

** Ukkonen

Ten years later, Ukkonen substantially improved the performance of this calculation [3]. His paper contained two major advancements. He proved (again under conditions) that in order to compute the D-L distance, one need only compute the recurrence relation in a fairly tight band around its main diagonal (substantially decreasing the number of operations required). Next, he moved from the primary recurrence relation of Lowrance & Wagner to a dual problem of computing f(k,p) which is defined as the maximal index i on diagonal k for which the edit distance between A(1..i) & B(1..j) is p; this doesn't reduce the time complexity but does reduce that of space. His algorithm runs in O(s*min(|A|,|B|)) (where s is the D-L distance between A & B) and space O(min(s,|A|,|B|))).

** Berghel & Roach

Eleven years on, Berghel & Roach improved Ukkonen's algorithm by deriving even tighter bounds on the region of the region of the recurrence relation that needs to be computed, leading to (in their application) a 42% speedup over Ukkonen. If s is the edit distance from A to B, and m & n their respective string lengths, and WLOG n >= m, define p to be 1/2s - 1/(2*(n-m)). Then the worst-case running time of this algorithm is O(n*p) and the expected running time is O(n+(p*s)). 

After reading this paper, I spent some time searching the literature for references to it (looking for further improvements). I didn't find any directly-related improvements. Later references either cited it as the best known to the author(s) for computing Damerau-Levenshtein distance, or as a point of interest in developing different string metrics.

* Results

#+BEGIN_SRC bash
>$: uname -a
Linux saradoc 5.3.0-7625-generic #27~1576337002~19.10~bc3488b-Ubuntu SMP Sat Dec 14 18:31:03 UTC  x86_64 x86_64 x86_64 GNU/Linux
>$: cd test && make timing-tests
...
Lowrance & Wagner: processing took 5500ms
Ukkonen: processing took 1931ms
Berghel & Roach: processing took 1175ms
#+END_SRC

What do you know? The speed-up from Ukkonen to Berghel & Roach was 39.15%, very close to the promised 42% all those years ago.

More recent results:

#+BEGIN_SRC bash
  $> date
  Sun Jul 18 16:21:21 PM PDT 2021
  $> uname -a
  Linux bree 5.12.14-arch1-1 #1 SMP PREEMPT Thu, 01 Jul 2021 07:26:06 +0000 x86_64 GNU/Linux
  $> cd test && make timing-tests
  ...
  Lowrance & Wagner: processing took 7361ms
  Ukkonen: processing took 1957ms
  Berghel & Roach: processing took 1049ms
#+END_SRC
* TODO

In my benchmarking, I've found it important to avoid the use of =std::vector=, which surprises me. I've instead just used flat arrays & done the two-dimensional indexing manually.

All the other references check for common prefixes before starting the algorithm, which I haven't tested, yet.

* References

  1. Fred J. Damerau, [[https://dl.acm.org/doi/pdf/10.1145/363958.363994][A Technique for Computer Detection and Correction of Spelling Errors]], Communications of the ACM, 7 (1964) No. 3, 171-176.
  2. Roy Lowrance and Robert A. Wagner, [[https://dl.acm.org/doi/10.1145/321879.321880][An Extension of the String-to-String Correction Problem]], Journal of the Association for Computing Machinery, 22 (1975), No 2, 177-183.
  3. Esko Ukkonen, [[https://pdf.sciencedirectassets.com/273276/1-s2.0-S0019995885X8039X/1-s2.0-S0019995885800462/main.pdf?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEC8aCXVzLWVhc3QtMSJHMEUCIQC1kVaxnrMJhDDAI1LD%2BTc2nBVuHrD%2BdRlb5Pl6ZeyZFAIgZ9%2FBetqz2X%2FW0rNTKYvMMIk5J%2BBEUhZkX%2B9phg2P6FEqvQMIp%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARADGgwwNTkwMDM1NDY4NjUiDGM7R%2FG7LTgNdTuZIyqRA5g5dXRt3Yxs7po8YCnZUsf5l4wdeCN3zPs%2BGbm0FzYfB6yETNBjdh5WbLqvFhN4y5hytxrq16xgN%2FJC8a9eobnLDkEdo2e4kLQxfguqiuBM2hRLSZbaGIJgYjjqg8SC%2Bqf%2FjYy8y%2B8V%2BAnZ0tUj8YP%2FIA%2FsqfQ5v3CyUAbq3Ttrvezwiu%2FHkIS9lwQKWfP11OnUtIq%2FPydtKtEsJC13s7xwSaJ2ku%2F%2BhOAKkGjHm9qBqqzMQItk%2BhFldBjSZSbCU92Rs2X%2FdXq7xts94dWOeREKLBGKcc5KwRK%2FYl5XxB8QLIQHTXDVIe7%2BCVikPToPNOXXlxccQ2%2FWmErd5mCuLxDdV0d%2Bemzso%2FScwR9%2Byk%2B4LMl3vKq6pFl7uBtJLcqN8shVo5aiDnj1ur1RrcVitHMWxH2z8ntBltw50jFZHBCXAB8JdWKeZR2lbsyExS18uLUR5wtU9Ky56GlFfKmku9O%2B36yOfpQdKVaJmtcgmHMolR6kjsgkPx4Q39wtvDHpndT86AVFeqNJOyRf%2F5oclVcYMLOCnvcFOusBdNkaW87JMuP2MxnL37Fc1JMZZXdN3wJ4VojRZ31wYpoBAGnSZSnEtSlMRMOUcT8uR1R0HnAv43Sz0KMyvbZ%2FB6vZ4%2BdoRl72CUdIhWyaPDgYdO3PE7tdVlCGJsy5wmTVV7GLX0KxXd29cIW4%2FOi3U2iDTqOtpdrEs6E1fkLk%2FKSCJ%2By5l%2Fv6v%2FMgI6mQMR3O6S1iMq5NlY6ZWwWEh41GPGIIzNdeL7e7VV5lP2HRB8YuCd6XK4ceTxAjTLR%2BQxqZ7j8eRWsCLeJ%2Bhtjbsgoj1MmT%2BeM6%2Fz1iQxkxSMInTHDPG96aQ5NwGEuYsg%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200615T144720Z&X-Amz-SignedHeaders=host&X-Amz-Expires=300&X-Amz-Credential=ASIAQ3PHCVTY7GOAFJ6P%2F20200615%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=51ea6d3e9359ae1018a9d683b9737c00a2295413ff2d8f3ba6f00745482e55fa&hash=acd357b2b5c9fef255e3dd287d3449c02c6b93e4d2166c529eb40fadfb5d0d18&host=68042c943591013ac2b2430a89b270f6af2c76d8dfd086a07176afe7c76c2c61&pii=S0019995885800462&tid=spdf-6ac21182-b6f2-4264-aca4-c6280a3bbd05&sid=f21bdeb18e69934eb97ba7f289c24d8ab1f3gxrqa&type=client][Algorithms for Approximate String Matching]], Information and Control, 64 (1985) 100--118.
  4. Hal Berghel and David Roach, [[http://berghel.net/publications/asm/asm.pdf][An Extension of Ukkonen's Enhanced Dynamic Programming ASM Algorithm]], ACM Transactions on Information Systems, 14 (1996) No. 1, 94-106.
